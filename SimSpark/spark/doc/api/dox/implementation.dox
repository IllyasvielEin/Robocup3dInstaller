// ============================================================================
// [Documentation - implementation]
// ============================================================================

/*!
@page implementation Implementation

rcssserver3D is a physical simulation system.
The primary purpose of this system is to provide a *generic* simulator for different kinds of simulations.
In these simulations, agents can participate as external processes.
To create specific simulations, important parts of the simulator are build as plugins that can be replaced for different simulations.
The plugins can be exchanged at runtime.
Things designed as plugins are for example parts of agents: agents can be using different actuators or perceptors.
Other plugins are responsible for the simulator protocol or also for the rules of specific simulations.  
Simulations for this simulator can be constructed to a great part by changing text files with no further recompilation.
The soccer simulation makes not yet use of this feature, but changes towards this are already planned.

The simulation system was created with a specific simulation in mind, that is a 3D physical soccer simulation for RoboCup Simulation league.
To this end, this distribution contains a set of plugins for RoboCup Soccer Simulation League.
The soccer simulator can be found in the <tt>./app/simulator/</tt> subdirectory.
The basic simulator concept was presented on the 2003 RoboCup Symposium in Padova [1].

For scientific simulations, it is useful to be able to keep track of the time used by different agents for thinking.
A special plugin makes it possible to use the simulator together with SPADES, a middleware system for agent based simulations.
SPADES was presented on the 2002 RoboCup Symposium in Fukuoka [2] (SPADES itself is not part of this package).

If you installed <tt>rcssserver3D-0.2.x</tt> or <tt>0.1</tt> before, make sure to clean the <tt>~/.rcssserver3D/</tt> directory prior to using the new version.
Also better remove the old installed libraries in /usr/local/lib/rcssserver3D manually.
Sorry for this inconvenience.



@section Package Overview
The different parts of this package are organized in different directories as follows:

<table border="0">
	<tr>
	  <td class="defcell"><tt>./app/</tt></td>
	  <td>
	    Different applications.
      These applications are mostly tests of different subsystems of the simulator.
      Additionaly, there is  
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./app/simulator/</tt></td>
	  <td>
	    The soccer simulator.
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./app/rcssmonitor3d/</tt></td>
	  <td>
	    A simple monitor that displays agents connected to the simulator.
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./app/agenttest/</tt></td>
	  <td>
	    A 'hello world' agent (does nothing very useful, kick and run soccer).
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./lib/</tt></td>
	  <td>
	    The main simulator parts as libraries. The simulator consists of these parts:
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./lib/salt/</tt></td>
	  <td>
	    This library provides a collection of useful general purpose classes.
      It contains mostly math-and system-related functionality, such as a 3D Vector class, a Matrix class, a file I/O wrapper and an abstraction for loading/accessing shared libraries.
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./lib/zeitgeist/</tt></td>
	  <td>
	    The Zeitgeist library provides two major features.
      It implements a mechanism to work with class objects in C++.
      A class object is just a factory of class instances.
      In addition to this mechanism, it also implements an object hierarchy.
      This hierarchy is essentially a virtual file system, where the 'directories' and 'files' are instances of C++ classes.
      These two concepts are quite intertwined with each other, as class objects can also live inside the object hierarchy.
      Objects within the hierarchy are identified with a unique name.
      On top of these two features, the Zeitgeist library also provides three very important 'built-in' services.
      Each basic service is usually represented by a 'server' class in our terminology.
      An instance of such a class provides the service to other parts of the system.
      The three services built into the Zeitgeist library are the @subpage log_server "LogServer", the @subpage file_server "FileServer", and the @subpage script_server "ScriptServer".
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./lib/oxygen/</tt></td>
	  <td>
	    Oxygen is the actual engine which is used for the simulation.
      It is implemented on top of the Zeitgeist framework and provides a multitude of different services to a client application.
      It handles the physics aspect (PhysicsServer), the geometry aspect (PhysicsServer) and the agent aspect (AgentAspect, ControlAspect).
      Another important part of this library is performing the  world simulation (SceneServer).
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./lib/kerosin/</tt></td>
	  <td>
	    Kerosin handles the visualization aspect (ImageServer, FontServer, OpenGLServer, TextureServer, MaterialServer).
      The classes in the library also provide basic interfaces for receiving input in interactive simulations (InputServer) and for playing sounds (SoundServer).
      Currently, it is not used for the simulator.
	  </td>
	</tr>
	<tr>
	  <td class="defcell"><tt>./plugins/</tt></td>
	  <td>directory containing plugins to extend the simulator</td>
	</tr>
</table>



@section Known Problems

-   If during linking the compiler complains that it cannot find <tt>-lslang</tt>, set a symbolic link <tt>/usr/lib/libslang.so</tt> linking to <tt>/usr/lib/libslang.so.1</tt>.



@section Literature
<pre>
[1] Marco Koegler and Oliver Obst. Simulation League: The Next Generation.
    In Daniel Polani, Andrea Bonarini, Brett Browning, and Kazuo
    Yoshida, editors, RoboCup 2003: Robot Soccer World Cup VII,
    Lecture Notes in Artificial Intelligence, Springer, Berlin,
    Heidelberg, New York, 2004.

[2] Patrick Riley. SPADES: Middleware for Parallel Agent Discrete
    Event Simulation. In Gal A. Kaminka, Pedro U. Lima, and Raul
    Rojas, editors, RoboCup-2002: Robot Soccer World Cup VI, Lecture
    Notes in Artificial Intelligence, pp. 162-178, Springer Verlag,
    Berlin, 2003.
</pre>





@date Wed May 12 CEST 2004 Last modified

*/



// ============================================================================
// [Documentation - implementation - log_server]
// ============================================================================

/*!
@page log_server LogServer

The LogServer manages a number of logging streams.
Each logging stream is associated with a logging mask: Debug, Normal, Warning, Error.
Based on its current state, the LogServer then decides which streams to multiplex a log message to.

*/



// ============================================================================
// [Documentation - implementation - file_server]
// ============================================================================

/*!
@page file_server FileServer

The FileServer manages a series of FileSystems.
When a file is opened through the FileServer it searches its internal list of FileSystems and returns the first(!) successful fileopen attempt.
A virtually unlimited amount of file systems can be added.
FileSystems are created through the class object mechanism.
In order to mount a file system, one must specify the FileSystem class and an associated path string.
How this path string is interpreted is up to the implementation of the FileSystem.
For example, the FileSystemSTD implementation (see Plugins workspace) interprets the path as a regular directory path, whereas the FileSystemZIP implementation interprets it as the location of a ZIP file.

*/



// ============================================================================
// [Documentation - implementation - script_server]
// ============================================================================

/*!
@page script_server ScriptServer

The ScriptServer allows executing the contents of files and strings via the Ruby scripting language, as well as provide access to script-side variables.
The implementation also provides the necessary glue code to allow the script-side to execute C++ functions.
The necessary wrapper code for this is part of the class object definition.
Every pair of cpp/h files which is part of the Zeitgeist framework has a third file associated with it.
The filename is post-fixed with a '_c' and it contains the class object definition, as well as the script-side interface.

*/