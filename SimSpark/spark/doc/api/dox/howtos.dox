// ============================================================================
// [Documentation - howtos]
// ============================================================================

/*!
@page howtos HowTos

This section of the documentation deals with small examples, which show a developer how to perform certain tasks:

-   @subpage howto_write_class_object
-   @subpage howto_register
-   @subpage howto_script
-   @subpage howto_function
-   @subpage howto_perceptor
-   @subpage howto_effector
-   @subpage howto_control
-   @subpage howto_agent
-   @subpage howto_export
-   @subpage howto_simulation

*/


// ============================================================================
// [Documentation - howtos - howto_write_class_object]
// ============================================================================

/*!
@page howto_write_class_object How to write a class object for a C++ class

This topic is fundamental in the understanding of how the class object and the object hierarchy framework interact with each other.

Let's say we have a simple class:

@snippet spark_snippets.cpp simple class

Now, in order to write a class object for this class we must do two things:
1.  The class must derive from the @ref zeitgeist::Object class (or one of its descendants, especially @ref zeitgeist::Leaf and @ref zeitgeist::Node if instances of this class are to live in the object hierarchy).
2.  In addition to this, a class object must be declared and defined, which serves as a factory for instances of this class.

The first step is performed easily:

@snippet spark_snippets.cpp simple leaf class step1

Now, we just have to write a class object for this class.
As this is a pretty repetitive procedure, several helper-macros exist to make this as painless as possible.
First, we declare the class object.
This is done in the header file with the @ref zeitgeist::Class::DECLARE_CLASS macro:

@snippet spark_snippets.cpp simple leaf class step2

With this macro, we declare the class object.
If @c Simple would have been an abstract base class (containing one or more pure virtual functions) we would have needed to use the @ref zeitgeist::Class::DECLARE_ABSTRACTCLASS macro instead.

What do these macros actually do?  
Both create a new class with the mangled name @c Class_XXXX, where @c XXXX is the name of the class.
In our case this would be @c Class_Simple.
This class is derived from @ref zeitgeist::Class.
In the case of @ref zeitgeist::Class::DECLARE_CLASS the macro also provides a @ref zeitgeist::Class::CreateInstance function, which creates an instance of the Simple class (upcast to @ref zeitgeist::Object).
@ref zeitgeist::Class::DECLARE_ABSTRACTCLASS does not do this, as it is impossible to create an instance of an abstract class.
It inherits the base behavior from @ref zeitgeist::Class, which just returns @c NULL.  
In addition to this, both macros declare a @ref zeitgeist::Class::DefineClass member function, which needs to be implemented to define the class object fully.
This is done in an additional <em>.cpp</em> file.
If the class above was implemented in the files <em>simple.h</em> and <em>simple.cpp</em>, the accompanying class object should be placed in the file <em>simple_c.cpp</em>.
This naming convention has been found useful during development and should be adopted.  
A minimal *simple_c.cpp* should look like this:

@snippet spark_snippets.cpp simple leaf class_c

The @ref zeitgeist::Class::CLASS macro is used to identify the name of the class object.
In the above example, it just resolves to @c Class_Simple.
@ref zeitgeist::Class::DEFINE_BASECLASS is used to identify the base class of the class described by this class object.
This can appear multiple times to allow for multiple inheritance.

We now have a working class object.
The problem is, that the object hierarchy does not know this class object, yet.
So, we can't really use it.
The @ref howto_register "next HowTo" explains how to register these class objects.

*/


// ============================================================================
// [Documentation - howtos - howto_register]
// ============================================================================

/*!
@page howto_register How to register a class object

In the @ref howto_write_class_object "previous HowTo" we created a class object for the C++ class @c Simple.
Before this class object can be used by the zeitgeist framework it must be registered with a @ref zeitgeist::Core object.
The @ref zeitgeist::Core is the object hierarchy, which is basically a virtual file system where instances of classes represent the directories and 'files'.
Therefore, each class instance can be identified by a path.
The @ref zeitgeist::Core provides the @ref zeitgeist::Core::RegisterClassObject function which inserts the class object into the object hierarchy.
Class objects are located under the '/classes/' branch of the hierarchy.  
We have two major scenarios of how a class object can be registered: Directly or indirectly!



@section direct_registration Direct Registration

This scenario is used in the case of static libraries and executables, which want to expose custom classes to the object hierarchy.
An example of a library, which does this is Kerosin.
This way of registering is pretty straight forward and involves an initialization function which has a means to access the @ref zeitgeist::Core instance where the class objects are to be registered.
Then it (directly) calls the @ref zeitgeist::Core::RegisterClassObject method to successively add class objects.
Here's a short snippet from the Kerosin library:

@snippet spark_snippets.cpp direct class registation

The Kerosin library is initialized by creating an instance of the Kerosin class.
The constructor needs a reference to the Zeitgeist object (which represents the Zeitgeist library), so it can get access to the Core.
The class objects are all added to the object hierarchy under the '/classes/' branch.
The second parameter of @ref zeitgeist::Core::RegisterClassObject allows to specify an additional subpath.
So, the class object for the @c SoundServer (for example) will be located at '/classes/kerosin/SoundServer' ... in a way, this allows to create a form of namespaces among the class objects.
As we can see, it is possible to add a class object directly at any time during the execution of the program.



@section indirect_registration Indirect Registration

The second scenario involves packaging a bunch of class objects into a shared library (DLL).
The DLL becomes a class library, containing a collection of classes to be added to the object hierarchy.
This kind of DLL is referred to as a Bundle.
The Bundle contains a well-defined entry point function, which registers its contents with the calling Core.
This (again) is simplified through the use of several macros.
First, we have to create a DLL project, containing a bunch of classes and their corresponding class objects (see the @ref howto_write_class_object "previous HowTo").
Then, we create an additional <em>.cpp</em> file.
I usually call this file <em>export.cpp</em>.
Let's say we have two classes in our bundle, @c Simple and @c Complex.
The corresponding <em>export.cpp</em> would look like this:

@snippet spark_snippets.cpp indirect class registation

Thanks to the macros, this is again very easy to grasp.
We just include the header files of all classes we want to expose.
These should also incorporate the correct class object declarations.
Then we include the zeitgeist framework.
The following macros implement the entry point function.
@ref zeitgeist::Class::ZEITGEIST_EXPORT_BEGIN implements the beginning of the function.
Then we use @ref zeitgeist::Class::ZEITGEIST_EXPORT for every class we want to export, and finally @ref zeitgeist::Class::ZEITGEIST_EXPORT_END to 'terminate' the function.
Now, we just compile the shared library and 'presto' ... a Zeitgeist-capable Bundle has been created.
The @ref zeitgeist::Class::ZEITGEIST_EXPORT_EX macro can be used to specify a subpath as above with @ref zeitgeist::Core::RegisterClassObject.

To indirectly register the classes contained in a Bundle, you just import the bundle into the Core.
This is done with the @ref zeitgeist::Core::ImportBundle member function.
This function opens the shared library, gets the entry point function and calls it with an STL list.
The class objects are added to this list within the entry point function.
After returning, all class objects contained in this list are added to the object hierarchy.

In the @ref howto_script "next HowTo", we will take a look at executing Ruby scripts, loading Bundles and creating instances of classes via scripts.

*/


// ============================================================================
// [Documentation - howtos - howto_script]
// ============================================================================

/*!
@page howto_script How to script with Ruby and Zeitgeist

A lot of the flexibility of the software system provided in this diploma thesis comes from the ability to perform a lot of operations through scripts.
The system uses the [Ruby scripting language](http://www.ruby-lang.org/en/).
In this HowTo we will learn how to execute scripts and we will meet a few built-in scripting commands for interaction with the object hierarchy.



@section executing_scripts Executing Scripts

The task of executing scripts is rather easy.
It is done using a built-in class of Zeitgeist ... the ScriptServer.
The ScriptServer is located in the object hierarchy at the position '/sys/server/script'.
Using a CoreContext, we can access an object in the hierarchy.
We retrieve the instance of the ScriptServer and then use it to execute a Ruby script:

@snippet spark_snippets.cpp run a ruby script

As the above program shows, the entire system relies heavily on the [Boost library](http://www.boost.org) and its smart pointer facilities.
This makes every object reference counted and ensures safe object deletion.
Due to the template nature it does make a few code lines longer than usually necessary, but the added safety is worth it.
The example above should be self-explanatory.
We create the Zeitgeist object.
This creates the object hierarchy and the built-in services (ScriptServer, LogServer and FileServer).
Then, we create a context.
This is necessary, because everytime we specify a path, we can specify a relative path.
Thus, we need a position in the object hierarchy we need to be relative to ... this is provided by the CoreContext.
Using it, we retrieve the ScriptServer instance and execute a script through it.



@section builtin_script_commands Builtin Script Commands

The ScriptServer has its own CoreContext associated with it.
So, every script command can be considered to be executed at a specific location in a virtual file system.
Basically, the scripts are run inside a 'shell'.  
Now, let's take a look at the builtin commands:

-   <b><code>importBundle (string path)</code></b>  
    This command is analogous to calling @ref zeitgeist::Core::ImportBundle.
    It takes a string as a parameter, which should be the location of a DLL containing a valid entry point function.

-   <b><code>selectObject (string path) / cd (string path)</code></b>  
    The actual name of the command is selectObject, but an alias to cd is provided.
    This command makes it possible to navigate the object hierarchy.
    It works similar to its command shell counterpart, except that the path always has to be given in the form of a string.
    This function accepts absolute and relative paths.
    It changes what I call the 'current working object' or the 'current selected object'. 

-   <b><code>ls</code></b>  
    This command lists the contents of the current working object.

-   <b><code>pushd</code></b>  
    This command pushes the current working object on a stack for later use.
    This is extremely helpful when building larger scene graph hierarchies.

-   <b><code>popd</code></b>  
    Pops a current working object off the stack.

-   <b><code>dirs</code></b>  
    Lists the stack of current working objects which have been pushed via pushd.
  
-   <b><code>new (string className, string path)</code></b>  
    This command creates instances of classes, names them and places them at a certain location in the object hierarchy.
    The first parameter is the name of the class to instantiate.
    This name is relative to the '/classes/' object.
    The second parameter is the name and path of the object to create.

    Some examples:
    @code{.rb}
    new ('Simple', 'test')
    @endcode
    This creates an instance of the Simple class (/classes/Simple) and gives it the name 'test'.
    It is created at the current location in the object hierarchy. 
    @code{.rb}
    new ('Simple', 'blub/test')
    @endcode
    This creates an instance of the Simple class (/classes/Simple) and gives it the name 'test'.
    It is created under a subdirectory of the current location called 'blub' ... So if one would be located at the root directory (/).
    The new instance of Simple would be located at '/blub/test'.  
    It is also possible to specify namespace for class names.
    For example, you create the FontServer of Kerosin like this:
    @code{.rb}
    new ('kerosin/FontServer', '/sys/server/font')
    @endcode
    The new function returns a Ruby proxy object to the created instance.
    The created instance is also made the current working object!!
    How the proxies can be used to invoke C++ side functions is discussed in the @ref howto_function "next HowTo".

-   <b><code>get (string path)</code></b>  
    This command returns a Ruby proxy object of the instance specified by the parameter 'path'.
    How the proxies can be used to invoke C++ side functions is discussed in the @ref howto_function "next HowTo".

-   <b><code>delete (string path)</code></b>  
    This command deletes an object (and its subobjects) from the object hierarchy.
    It basically unlinks the object from the hierarchy.
    This removes a reference.
    Only if no other references remain will the object be deleted!!!!

This already concludes our rundown of the builtin scripting functions of Zeitgeist.
We can now create and manipulate object hierarchies with simple Ruby scripts.
Some of the functions return a Ruby-side proxy object to an instance in the object hierarchy.
How the proxies can be used to invoke C++ side functions and how to expose C++ side functions to the proxies is discussed in the @ref howto_function "next HowTo".

*/


// ============================================================================
// [Documentation - howtos - howto_function]
// ============================================================================

/*!
@page howto_function How to expose C++ functions to Ruby scripts

As we want to expose much functionality to the script side, we also want to be able to call C++ functions from Ruby.
In order to do this, we intercept unknown function calls on the Ruby side.
The parameters are converted on the C++ side.
There we know the name of the function to call, the object to call them on, and the parameters.
But, how do we actually call the correct C++ function.
The answer lies in the class object.
The class object will contain the necessary meta-data to reroute the function call to the correct C++ function.
The class object defines the interface of the class to the script side.
This is done in the same file as the class definition was performed (the additional CPP file).
Let's go back to our Simple class from earlier HowTos:

@snippet spark_snippets.cpp simple leaf class step2

Now, let's say we want to expose the DoSomething() method. simple_c.cpp would look like this:

@snippet spark_snippets.cpp simple leaf class_c with function

Yes, you guessed right ... more helper macros.
Every function is declared using the FUNCTION()-macro.
As a parameter it takes the name of the function.
I like to always have Ruby-side functions start with a lower-case letter and C++-side functions with a capital letter.
The function macro just declares a function, which takes two parameters: obj and in.
obj is the object we are calling the function on (basically, the 'this' or 'self' pointer).
in is an STL vector of input parameters.
The vector holds boost::any types, which have to be cast back.
Within the function, we check if the number of parameters match (in our case 0 parameters).
We cast the obj pointer to the correct type and call the appropriate function.
In DefineClass() we also have to define the function using the DEFINE_FUNCTION() macro.
After this has been done (and the class object is registered with the Core), we can execute the following script-code:

@code{.rb}
mySimpleObj = new ('Simple', 'test');
mySimpleObj.doSomething();
@endcode

This would then call the C++ member function DoSomething().
Now, how about passing some parameters. Let's marshall the PrintInt() function:

@snippet spark_snippets.cpp simple leaf class_c function extension

The above function obviously also would need to be defined in DefineClass().
Now, we see that any_cast is used to retrieve the type (!) of the parameter stored in the vector 'in' at position 0 (the first parameter from left to right maps to position 0).
It should be noted, that this way of marshalling is not safe, meaning that exceptions will occur if a wrong parameter has been issued script-side.
So, please be careful when doing this ... and take care to pass correct parameters on the script side.
The problem is, that Ruby is dynamically typed, whereas C++ is statically typed.
Also, no types are coerced automatically.
So, if you cast to an int and somebody uses a float in the script, this will likely cause an error!

Another note is that in the current implementation NO return parameters can be passed to the script side.
This is unfortunate, but would have created yet another (major) source of typing errors.
One is dangerous enough.
Also, scripts should be kept linear to make them easier to read.

*/


// ============================================================================
// [Documentation - howtos - howto_perceptor]
// ============================================================================

/*!
@page howto_perceptor How to implement a Perceptor

In this HowTo we will focus on creating a perceptor.
A perceptor allows an agent aspect to perceive the virtual world it lives in.
Given the technology presented in the previous HowTos about class objects and scripting, implementing a Perceptor is very simple.
All Perceptors are derived from the @ref oxygen::Perceptor class.
They have to implement a single function: @ref oxygen::Perceptor::Percept.
We will now take a short look at a Perceptor which has been implemented as part of the framework.
It is called @c VisionPerceptor.
Let's take a look at the signature of the @c Percept() function: 

@code{.cpp}
typedef std::hash_map<std::string, boost::any> TDictionary;

virtual bool Percept(TDictionary @&dictionary) = 0;
@endcode

We need a generic interface for this function, which would allow every possible Perceptor to be implemented.
For generality, we chose the following interface.
Every @c Percept() function accepts a @c TDictionary, which maps a @c std::string to an @c boost::any type.
If the @c Percept() function returns some valid data in the dictionary, it returns @c true, else @c false.
The agent code using the Perceptor can then query the @c TDictionary for certain results.
Every Perceptor should clearly describe which properties it returns, and which type is associated with the property.
For example, the @c VisionPerceptor says, that it returns a property named @c visibleObjects with the type of @c TLeafList (see visionperceptor.h).
A @c TLeafList is just a bunch of nodes in the object hierarchy.
The agent using the @c VisionPerceptor knows how to deal with this.
If @c Percept() returns @c true, it knows that the @c visibleObjects property in @c TDictionary contains a @c TLeafList of visible objects.
It then accesses the dictionary and casts the property to the correct type.

So, implementing a custom Perceptor is easy.
One just has to derive from the @ref oxygen::Perceptor class and implement the @ref oxygen::Perceptor::Percept function.
First, the necessary outputs should be identified.
These conditions should then be checked internally in the @c Percept() function and returned to the caller where appropriate.

*/


// ============================================================================
// [Documentation - howtos - howto_effector]
// ============================================================================

/*!
@page howto_effector How to implement an Effector

In this HowTo we will focus on creating an effector.
An Effector allows an agent to somehow modify/interact with the virtual world.
Implementing an Effector is similar to @ref howto_perceptor "implementing a Perceptor".
All effectors derive from a common base class, @ref oxygen::Effector, and must implement the @ref oxygen::Effector::Perform function.
It's signature looks like this:

@code{.cpp}
virtual bool Perform(boost::shared_ptr<BaseNode> @&base, float deltaTime);
@endcode

The first parameter of this call is the node, which the effector should act upon and the second parameter is the amount of time, which is to be simulated (in miliseconds).
The function returns @c true, if the operation was successful and @c false if not.
That's all there really is to it.
A small question yet remains: How can one pass parameters to an Effector?
This is usually done by other external functions.
Let's look at the @ref oxygen::ForceEffector.
It applies an accumulated force vector to a Body object in its @c Perform() function.
The amount of force to apply is accumulated via the @c AddForce() function.
This modifies the internal state of the @c ForceEffector instance.
Its @c Perform() function looks like this:

@snippet spark_snippets.cpp force effector perform

First, it checks if base is valid.
Then it retrieves the Body object belonging to the base object and then applies the accumulated force via an ODE function.

*/


// ============================================================================
// [Documentation - howtos - howto_control]
// ============================================================================

/*!
@example survival_control_aspect.cpp
*/

/*!
@page howto_control How to implement a Control Aspect

In this HowTo we will focus on creating a Control Aspect.
The Control Aspect is responsible for maintaining the rules of a simulation.
It also decides, which agent can request which effectors and perceptors.
Thus, it has at least two tasks to fullfill.
For one, check effector and perceptor requests, and for two, chech and enforce the rules of the simulation each frame.

Implementing the request feature of the control aspect is simple.
All custom Control Aspects derive from the @ref oxygen::ControlAspect class.
This class is an abstract base class, requiring descendants to implement two protected functions: @ref oxygen::ControlAspect::RequestEffectorInternal and @ref oxygen::ControlAspect::RequestPerceptorInternal.
Their function prototypes look very similar:

@code{.cpp}
// function used by agents to request effectors (this must be implemented to provide custom behavior)
virtual boost::shared_ptr<Effector> RequestEffectorInternal(boost::shared_ptr<AgentAspect>@& agent, const std::string@& effectorName) = 0;

// function used by agents to request perceptors (this must be implemented to provide custom behavior)
virtual boost::shared_ptr<Perceptor> RequestPerceptorInternal(boost::shared_ptr<AgentAspect>@& agent, const std::string@& perceptorName) = 0;
@endcode

The functionality of these two functions is nearly identical, except that one deals with Effectors and the other with Perceptors.
Other than that, everything is the same.
Therefore, we will only look at one of them.
@ref oxygen::ControlAspect::RequestEffectorInternal() accepts two parameters, a (smart) pointer to the @ref oxygen::AgentAspect which is requesting the Effector and the name of the Effector requested.
An implementation then has to first check the type of the AgentAspect and then check if it should allow the request.
This is best illustrated by a small code sample from the Survival plugin (a sample simulation located under plugin/survival):

@snippet spark_snippets.cpp control aspect

As we can see, the function first checks, if the agent is a @c SurvivalAgentAspect.
Only requests for the oxygen/ForceEffector are permitted.
In all other cases the smart pointer equivalent of a @c NULL -pointer is returned.
This is analogous for the @ref oxygen::ControlAspect::RequestPerceptorInternal function.

Besides checking these kinds of requests, a Control Aspect also has to enforce the rules of the simulation.
This is best done in the @ref oxygen::ControlAspect::PrePhysicsUpdateInternal function (dictated by the BaseNode class).
The Control Aspect holds the relevant world state.
For example, in the Survival Simulation it holds the current health of the two agents, as well as the rate at which it decreases and the number of times each agent died.
Every frame, it updates these values.
This is done during the @ref oxygen::ControlAspect::PrePhysicsUpdate as this is before any simulation for this frame has taken place.
Some of the things to do during this phase of the update cycle are best demonstrated by the Survival Simulation's Control Aspect ... the @ref survival_control_aspect.cpp class.

The code should be fairly easy to understand.

*/


// ============================================================================
// [Documentation - howtos - howto_agent]
// ============================================================================

/*!
@page howto_agent How to implement an Agent

In this HowTo we will focus on creating an agent aspect.
The agent aspect is what separates a mere object in the world from a 'thinking' entity.
The agent aspect can use perceptors to receive information regarding its environment.
Based on this information and (usually also) the internal state of the agent aspect, it can then determine the optimal reaction to the situation.
He can then use his effectors to realize this goal.
This means that the work necessary to implement an agent aspect is split into two parts: Creating its perceptors and effectors, and the actual think-operation during each simulation step.

The first step for each agent aspect is to secure its perceptors and effectors.
This is done in the @ref oxygen::AgentAspect::OnLink function.
This function is a feature of the object hierarchy.
It is called automatically on a node after it has been inserted into the object hierarchy.
This procedure can be seen as the point of construction within the hierarchy.
Looking at the @c SurvivalAgentAspect (used in the Survival Simulation) we see that an agent aspect requests perceptors and effectors from the current simulations control aspect:

@snippet spark_snippets.cpp agent aspect

The agent aspect first retrieves a control aspect.
Using this control aspect it requests a @c ForceEffector, a @c VisionPerceptor and a @c LineSegmentPerceptor by specifying the correct class names.
As we have already seen in the previous HowTo, the control aspect makes sure that it is 'legal' to request these perceptors and effectors.

Now, the simulation can begin.
Every frame each agent aspect gets the chance to update its internal state and make use of its perceptors and effectors.
This is done in the Think() function, which every agent aspect needs to implement.
The interface for this function is dictated by the @ref oxygen::AgentAspect class, from which all custom agent aspects must derive:

@code{.cpp}
// this method must be implemented for the agents 'think' behavior
virtual void Think(float deltaTime) = 0;
@endcode

During the call to Think() each agent aspect just makes use of its perceptors and effectors as discussed in previous HowTos.
There is not anything more to it.

*/


// ============================================================================
// [Documentation - howtos - howto_export]
// ============================================================================

/*!
@page howto_export How to export a model from 3DS Max 4.2

The graphics engine developed to display the visual aspects in the scene is only capable of rendering static objects.
These objects are exported from the 3DS Max 4.2 package into the Void format used by the engine.
The exporter is written using [Flexporter](http://www.codercorner.com/Flexporter.htm written by Pierre Terdiman.
The Flexporter export plugin was written by adding to the sample 'VoidExporter' ... hence the name of the file format.
All the necessary code should be located under 'unsupported/FlexporterSDK'.
The most important project there would be VoidExporter.



@section howto_export_step1 Quick Installation Instructions

Flexporter is composed of three parts.
Support libraries in the form of DLLs, the 3DS Max Flexporter plugin in the form of a DLU file (a utility plugin) and Flexporter plugins (the actual exporters) in the form of FLX files.
Each group of files has to be put into the right directory.
The support DLLs have to be placed somewhere, where Windows will find them (any place in the PATH).
The Flexporter DLU file should be placed in the 'plugins' directory of the 3DS Max installation folder.
Note, that Pierre Terdiman provides several different versions of this file (for 3DS Max 4 and 5 plus various Character Studio combinations).
Only place the correct DLU in the plugins directory!
Last but not least, the Flexporter plugins have to be placed in the 3DS Max directory (the same directory which contains the 3dsmax.exe).
After this, the plugin should be loaded correctly on startup.
For further questions please refer to the Flexporter Documentation. 



@section howto_export_step2 Modelling

Objects can be modelled in 3DS Max as usual.
This also includes texture mapping, etc... The only thing to care about is the name of the materials used.
The exporter totally ignores the material settings.
It only cares about the material name, as this is interpreted by the graphics engine as the path to a file, which contains the material description.
So, if the material name is 'material/brick', this will cause the engine to look for a material file called 'material/brick'.
The contents of this file should look like this:

<pre>
Material.Diffuse  = &amp;texture/brick_d.jpg&amp;;
Material.Normal   = &amp;texture/brick_local.png&amp;;
Material.Specular = &amp;texture/brick_d.jpg&amp;;
</pre>

The Diffuse texture is the diffuse color of the surface, Normal is the normal map (used for bump-mapping) and Specular describes how light is reflected by the surface (this often is identical to Diffuse).



@section howto_export_step3 Exporting

Go to the Utilities pane and select the Flexporter utility plugin.
There hit 'Export ...' and a list of parameters should show up.
Make sure the VoidExporter is selected.
The default settings should be sufficient ... and export the file.
Then, you only have to load the file into the scenegraph.
This is described in the @ref howto_simulation "Simulation HowTo".
Look for the creation of StaticObject hierarchy nodes.

*/


// ============================================================================
// [Documentation - howtos - howto_simulation]
// ============================================================================

/*!
@page howto_simulation How to create a Simulation

In this HowTo we will focus on the steps involved in creating a simulation.
The truth is, we already have everything we need to know to create a simulation.
We can build control aspects to implement the rules governing our simulation.
We can implement agent aspects, which can interact with the world through perceptors and effectors.
Now, all we have to do is bundle all this different things together into a simulation.

A simulation is comprised of two things.
A bundle including all the custom elements making up the simulation (control aspects, agent aspects, custom perceptors and effectors) and a so-called assembly script, which builds the object hierarchy necessary to perform the simulation.
As the first aspect, building a bundle has already been described in a previous HowTo, we will focus on the assembly script.

The assembly script is just like any other Ruby script.
If we look at the Survival sample simulation, we see that a subdirectory 'survival' is created under the path of the simulator executable (app/simulator).
It contains a script called 'survival.rb'.
The name of the directory and the script MUST match (except for the rb-extension).
The simulator is started with the command-line parameter 'survival', causing it to look for a survival.rb script in the survival subdirectory.
We will now go through the survival.rb assembly script line by line:

@code{.rb}
# Import classes of this simulation description
importBundle('survival/survival');
@endcode

First, we begin by importing the bundle containing our custom classes.
This call adds them to the class object framework of the object hierarchy, making the classes available for future calls.

@code{.rb}
# create the control aspect
cd ('/usr/scene');

controlAspect = new ('SurvivalControlAspect', '_control');
@endcode

Then we select the 'scene' object.
The root of our hierarchical scene structure.
It is always located at the path '/usr/scene'.
There we create an instance of SurvivalControlAspect ... a class contained in the previously loaded bundle.

@code{.rb}
# create world and space aspects
cd ('/usr/scene');

world = new ('kerosin/World', '_world');
world.setGravity(0.0, -9.81, 0.0);

new ('kerosin/Space', '../_space');
@endcode

Next, we create two important classes for the physics aspect: a world and a space.
The world is where all dynamics objects (Bodies) live and the space is, where the geometry aspects can collide.

@code{.rb}
# setup camera
trans = new ('kerosin/Transform', '../camera');
trans.setLocalPos(0.0, 0.0, 10.0);

new ('kerosin/Camera', 'camera');

body = new ('kerosin/Body', '../_physics');
body.useGravity(false);

new ('kerosin/FPSController', 'fps');

collider = new ('kerosin/SphereCollider', '../_geometry');
collider.setRadius(2.0);

light = new ('kerosin/Light', '../../_light');
light.setRadius(50.0);
light.setDiffuseColor(1.0, 1.0, 1.0);
@endcode

The above calls add a camera object to the scene.
This is necessary to be able to visualize the simulation.
At first, we add a transform node.
Under it we attach a kerosin::Camera object.
It has a physics aspect (kerosin::Body), which in turn has an FPSController attached.
This controller receives the key-presses and mouse movements and translates these to physical movements of the camera.
Hence, the connection to the Body class.
Our camera is also capable of colliding with other objects in the world, so we add a SphereCollider with radius 2.
For some special FX we have also endowed the camera with a dynamic light.

@code{.rb}
# add arena
cd ('/usr/scene');
trans = new ('kerosin/Transform', 'arena');
trans.setLocalPos(0.0, 0.0, 0.0);
mesh = new ('kerosin/StaticMesh', '_visual');
mesh.load('model/arena.void');

# floor
pc = new ('kerosin/PlaneCollider', '../pc');
pc.setParams(0.0, 1.0 ,0.0, 0.0); 

#lights
trans = new ('kerosin/Transform', '../../light0');
trans.setLocalPos(0.0, 15.0, 0.0);
light = new ('kerosin/Light', '_light');
light.setRadius(80.0);
light.setDiffuseColor(1.0, 1.0, 1.0);
@endcode

The above blocks load a very simple rectangular 'playing field' and add a planar collision geometry (geometry aspect), as well as another dynamic light. 

@code{.rb}
# add slow
cd ('/usr/scene');

trans = new ('kerosin/Transform', 'slow');
trans.setLocalPos(-12.5, 1.0, -12.5);

visual = new ('kerosin/StaticMesh', '_visual');
visual.load('model/slow.void');

physics = new ('kerosin/Body', '../_physics');
physics.setSphere(1.0, 1.0);
physics.setMass(1.0);
physics.setMaxSpeed(3.0);

geometry = new ('kerosin/SphereCollider', '../_geometry');
geometry.setRadius(1.0);

agent = new ('SurvivalAgentAspect', '../_agent');
@endcode

Here we add the first agent to the world.
We begin by giving it a starting position (the transform node).
Then we add the visual aspect (load the slow.void mesh), physics aspect, geometry aspect and agent aspect (SurvivalAgentAspect).

@code{.rb}
# add fast
cd ('/usr/scene');


trans = new ('kerosin/Transform', 'fast');
trans.setLocalPos(12.5, 1.0, 12.5);


visual = new ('kerosin/StaticMesh', '_visual');
visual.load('model/fast.void');


physics = new ('kerosin/Body', '../_physics');
physics.setSphere(1.0, 1.0);
physics.setMass(1.0);
physics.setMaxSpeed(10.0);


geometry = new ('kerosin/SphereCollider', '../_geometry');
geometry.setRadius(1.0);


agent = new ('SurvivalAgentAspect', '../_agent');
@endcode

This adds the second agent to the world.
Almost identical to the second agent, except it has a higher maximum speed and a different visual aspect.

@code{.rb}
# add food
cd ('/usr/scene');


trans = new ('kerosin/Transform', 'food');
trans.setLocalPos(0.0, 1.0, 0.0);


visual = new ('kerosin/StaticMesh', '_visual');
visual.load('model/food.void');
@endcode

Last but not least, the 'food' object is added. As one can tell, it has only 'visual' character.
The control aspect determines internally if one of the agents has reached the food (see SurvivalControlAspect).

As one can see, creating assembly scripts is straight-forward.
One only has to keep track of what one is building up in the object hierarchy.
After the script is executed, the simulation is run automatically.

*/
